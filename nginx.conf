user www-data;
worker_processes 		4;	# one(1) worker or equal the number of _real_ cpu cores. 4=4 core cpu
worker_priority			15;    	# renice workers to reduce priority compared to system processes for
                            		# machine health. worst case nginx will get ~25% system resources at nice=15
# worker_rlimit_nofile		1024; 	# maximum number of open files

pid /run/nginx.pid;

events {
worker_connections 		768;	# number of parallel or concurrent connections per worker_processes
# multi_accept 			on;
# accept_mutex        		on;	# serially accept() connections and pass to workers, efficient if workers gt 1
# accept_mutex_delay 		500ms;	# worker process will accept mutex after this delay if not assigned. (default 500ms)
}

http {
## Size Limits
# client_body_buffer_size   	8k;
# client_header_buffer_size 	1k;
# client_max_body_size      	1m;
# large_client_header_buffers 	4 4k/8k;

# Timeouts, do not keep connections open longer then necessary to reduce
# resource usage and deny Slowloris type attacks.
client_body_timeout      	5s; 	# maximum time between packets the client can pause when sending nginx any data
client_header_timeout    	5s; 	# maximum time the client has to send the entire header to nginx
keepalive_timeout       	75s; 	# timeout which a single keep-alive client connection will stay open
send_timeout            	15s; 	# maximum time between packets nginx is allowed to pause when sending the client data
spdy_keepalive_timeout 		123s; 	# inactivity timeout after which the SPDY connection is closed
spdy_recv_timeout        	4s; 	# timeout if nginx is currently expecting data from the client but nothing arrives

## General Options
# aio				on;	# asynchronous file I/O, fast with ZFS, make sure sendfile=off  
charset				utf-8;	# adds the line "Content-Type" into response-header, same as "source_charset"
default_type              	application/octet-stream;
gzip                      	off; 	# disable on the fly gzip compression due to higher latency, only use gzip_static
# gzip_disable 			"msie6";
 gzip_static               	on;  	# precompress content (gzip -9) with an external script
# gzip_vary                 	on;  	# send response header "Vary: Accept-Encoding"
gzip_proxied             	any;  	# allows compressed responses for any request even from proxies
# gzip_comp_level 6;
# gzip_buffers 16 8k;
# gzip_http_version 1.1;
# gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
ignore_invalid_headers    	on;
include				/etc/nginx/mime.types;
include 			/etc/nginx/conf.d/*.conf;
include 			/etc/nginx/sites-enabled/*;
keepalive_requests        	50;  	# number of requests per connection, does not affect SPDY
keepalive_disable         	none; 	# allow all browsers to use keepalive connections
max_ranges                	1; 	# allow a single range header for resumed downloads and to stop large range header DoS attacks
msie_padding              	off;
open_file_cache           	max=1000 inactive=2h;
open_file_cache_errors    	on;
open_file_cache_min_uses  	1;
open_file_cache_valid     	1h;
output_buffers            	1 512;
pagespeed on;
pagespeed FileCachePath /var/ngx_pagespeed_cache;
pagespeed EnableFilters rewrite_css,rewrite_javascript,combine_javascript,remove_comments,collapse_whitespace,local_storage_cache;
pagespeed DisableFilters  rewrite_images,convert_png_to_jpeg;

pagespeed Statistics on;
pagespeed StatisticsLogging on;
pagespeed LogDir /var/log/pagespeed;
postpone_output           	1440;   # postpone sends to match our machine's MSS
read_ahead                	512K;   # kernel read head set to the output_buffers
recursive_error_pages     	on;
reset_timedout_connection	on;  	# reset timed out connections freeing ram
sendfile                  	on;  	# on for decent direct disk I/O
server_tokens             	off; 	# version number in error pages
# server_names_hash_bucket_size	64;
server_name_in_redirect   	off; 	# if off, nginx will use the requested Host header
source_charset            	utf-8; 	# same value as "charset"
tcp_nodelay               	on; 	# Nagle buffering algorithm, used for keepalive only
tcp_nopush                	off;
types_hash_max_size 		2048;

## Request limits
limit_req_zone  $binary_remote_addr  zone=gulag:1m   rate=60r/m;
 
# Logging Settings
log_format  main  '$remote_addr $host $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $ssl_cipher $request_time';
access_log /var/log/nginx/access.log main;
error_log /var/log/nginx/error.log;

# RSA ciphers
ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-RC4-SHA;

# ECDSA ciphers
#ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA;

ssl_ecdh_curve secp521r1;
ssl_prefer_server_ciphers on;
ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
#ssl_session_timeout 5m; # SPDY timeout=180sec, keepalive=20sec; connection close=session expires

# NAXSI
include /etc/nginx/naxsi_core.rules;
include /etc/nginx/doxi-rules/*.rules;

# PASSENGER
# passenger_root /usr;
# passenger_ruby /usr/bin/ruby;
}
